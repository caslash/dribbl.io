import Foundation
import Testing
@testable import NBAKit

struct PlayerProfileV2Tests {
    let jsonDecoder: JSONDecoder
    let response: NBAAPIResponse
    let url: URL
    
    init() throws {
        self.jsonDecoder = JSONDecoder()

        let bundles = Bundle.allBundles
        
        var url: URL?
        for bundle in bundles {
            if let foundURL = bundle.url(forResource: "playerprofilev2", withExtension: "json") {
                url = foundURL
                break
            }
        }
        
        guard let url = url else {
            fatalError("commonplayerinfo.json not found in test bundle.")
        }
        
        self.url = url
        
        let responseExample = try Data(contentsOf: url)
        
        self.response = try self.jsonDecoder.decode(NBAAPIResponse.self, from: responseExample)
    }
    
    @Test func canDecodePlayerProfileV2() throws {
        let responseExample = try Data(contentsOf: self.url)
        let playerprofilev2: PlayerProfileV2 = try PlayerProfileV2(from: responseExample)
        
        #expect(playerprofilev2.regularSeasonTotals.count >= 1)
        #expect(type(of: playerprofilev2.careerRegularSeasonTotals) == CareerTotalsRegularSeason.self)
        #expect(playerprofilev2.postSeasonTotals.count >= 1)
        #expect(type(of: playerprofilev2.careerPostSeasonTotals) == CareerTotalsPostSeason.self)
        #expect(playerprofilev2.allStarSeasonTotals.count >= 1)
        #expect(type(of: playerprofilev2.careerAllStarTotals) == CareerTotalsAllStarSeason.self)
        #expect(playerprofilev2.collegeSeasonTotals.count >= 1)
        #expect(type(of: playerprofilev2.careerCollegeTotals) == CareerTotalsCollegeSeason.self)
        #expect(playerprofilev2.preseasonTotals.count >= 1)
        #expect(type(of: playerprofilev2.careerPreseasonTotals) == CareerTotalsPreseason.self)
        #expect(playerprofilev2.regularSeasonRankings.count >= 1)
        #expect(playerprofilev2.postSeasonRankings.count >= 1)
    }
    
    @Test func canDecodeSeasonTotalsRegularSeason() throws {
        let seasontotalsregularseason: SeasonTotalsRegularSeason = try SeasonTotalsRegularSeason(from: response.resultSets[0].rowSet[0], headers: response.resultSets[0].headers)
        
        #expect(seasontotalsregularseason.playerId == 1628369)
        #expect(seasontotalsregularseason.seasonId == "2017-18")
        #expect(seasontotalsregularseason.leagueId == "00")
        #expect(seasontotalsregularseason.teamId == 1610612738)
        #expect(seasontotalsregularseason.teamAbbreviation == "BOS")
        #expect(seasontotalsregularseason.playerAge == 20)
        #expect(seasontotalsregularseason.gamesPlayed == 80)
        #expect(seasontotalsregularseason.gamesStarted == 80)
        #expect(seasontotalsregularseason.minutes == 30.500000)
        #expect(seasontotalsregularseason.fgm == 5.000000)
        #expect(seasontotalsregularseason.fga == 10.400000)
        #expect(seasontotalsregularseason.fgPct == 0.475)
        #expect(seasontotalsregularseason.fg3m == 1.300000)
        #expect(seasontotalsregularseason.fg3a == 3.000000)
        #expect(seasontotalsregularseason.fg3Pct == 0.434)
        #expect(seasontotalsregularseason.ftm == 2.700000)
        #expect(seasontotalsregularseason.fta == 3.200000)
        #expect(seasontotalsregularseason.ftPct == 0.826)
        #expect(seasontotalsregularseason.oreb == 0.600000)
        #expect(seasontotalsregularseason.dreb == 4.400000)
        #expect(seasontotalsregularseason.rebounds == 5.000000)
        #expect(seasontotalsregularseason.assists == 1.600000)
        #expect(seasontotalsregularseason.steals == 1.000000)
        #expect(seasontotalsregularseason.blocks == 0.700000)
        #expect(seasontotalsregularseason.turnovers == 1.400000)
        #expect(seasontotalsregularseason.personalFouls == 2.100000)
        #expect(seasontotalsregularseason.points == 13.90000)
    }
    
    @Test func canDecodeCareerTotalsRegularSeason() throws {
        let careertotalsregularseason: CareerTotalsRegularSeason = try CareerTotalsRegularSeason(from: response.resultSets[1].rowSet[0], headers: response.resultSets[1].headers)
    
        #expect(careertotalsregularseason.playerId == 1628369)
        #expect(careertotalsregularseason.leagueId == "00")
        #expect(careertotalsregularseason.teamId == 0)
        #expect(careertotalsregularseason.gamesPlayed == 585)
        #expect(careertotalsregularseason.gamesStarted == 585)
        #expect(careertotalsregularseason.minutes == 34.500000)
        #expect(careertotalsregularseason.fgm == 8.200000)
        #expect(careertotalsregularseason.fga == 17.800000)
        #expect(careertotalsregularseason.fgPct == 0.459)
        #expect(careertotalsregularseason.fg3m == 2.600000)
        #expect(careertotalsregularseason.fg3a == 7.100000)
        #expect(careertotalsregularseason.fg3Pct == 0.370)
        #expect(careertotalsregularseason.ftm == 4.500000)
        #expect(careertotalsregularseason.fta == 5.400000)
        #expect(careertotalsregularseason.ftPct == 0.840)
        #expect(careertotalsregularseason.oreb == 0.900000)
        #expect(careertotalsregularseason.dreb == 6.500000)
        #expect(careertotalsregularseason.rebounds == 7.300000)
        #expect(careertotalsregularseason.assists == 3.800000)
        #expect(careertotalsregularseason.steals == 1.100000)
        #expect(careertotalsregularseason.blocks == 0.700000)
        #expect(careertotalsregularseason.turnovers == 2.400000)
        #expect(careertotalsregularseason.personalFouls == 2.100000)
        #expect(careertotalsregularseason.points == 23.600000)
    }
    
    @Test func canDecodeSeasonTotalsPostSeason() throws {
        let seasontotalspostseason: SeasonTotalsPostSeason = try SeasonTotalsPostSeason(from: response.resultSets[2].rowSet[0], headers: response.resultSets[2].headers)
        
        #expect(seasontotalspostseason.playerId == 1628369)
        #expect(seasontotalspostseason.seasonId == "2017-18")
        #expect(seasontotalspostseason.leagueId == "00")
        #expect(seasontotalspostseason.teamId == 1610612738)
        #expect(seasontotalspostseason.teamAbbreviation == "BOS")
        #expect(seasontotalspostseason.playerAge == 20)
        #expect(seasontotalspostseason.gamesPlayed == 19)
        #expect(seasontotalspostseason.gamesStarted == 19)
        #expect(seasontotalspostseason.minutes == 35.900000)
        #expect(seasontotalspostseason.fgm == 6.500000)
        #expect(seasontotalspostseason.fga == 13.700000)
        #expect(seasontotalspostseason.fgPct == 0.471)
        #expect(seasontotalspostseason.fg3m == 1.200000)
        #expect(seasontotalspostseason.fg3a == 3.700000)
        #expect(seasontotalspostseason.fg3Pct == 0.324)
        #expect(seasontotalspostseason.ftm == 4.300000)
        #expect(seasontotalspostseason.fta == 5.100000)
        #expect(seasontotalspostseason.ftPct == 0.845)
        #expect(seasontotalspostseason.oreb == 0.500000)
        #expect(seasontotalspostseason.dreb == 3.800000)
        #expect(seasontotalspostseason.rebounds == 4.400000)
        #expect(seasontotalspostseason.assists == 2.700000)
        #expect(seasontotalspostseason.steals == 1.200000)
        #expect(seasontotalspostseason.blocks == 0.500000)
        #expect(seasontotalspostseason.turnovers == 2.200000)
        #expect(seasontotalspostseason.personalFouls == 2.600000)
        #expect(seasontotalspostseason.points == 18.500000)
    }
    
    @Test func canDecodeCareerTotalsPostSeason() throws {
        let careertotalspostseason: CareerTotalsPostSeason = try CareerTotalsPostSeason(from: response.resultSets[3].rowSet[0], headers: response.resultSets[3].headers)
        
        #expect(careertotalspostseason.playerId == 1628369)
        #expect(careertotalspostseason.leagueId == "00")
        #expect(careertotalspostseason.teamId == 0)
        #expect(careertotalspostseason.gamesPlayed == 121)
        #expect(careertotalspostseason.gamesStarted == 121)
        #expect(careertotalspostseason.minutes == 39.000000)
        #expect(careertotalspostseason.fgm == 8.100000)
        #expect(careertotalspostseason.fga == 18.500000)
        #expect(careertotalspostseason.fgPct == 0.439)
        #expect(careertotalspostseason.fg3m == 2.400000)
        #expect(careertotalspostseason.fg3a == 6.900000)
        #expect(careertotalspostseason.fg3Pct == 0.348)
        #expect(careertotalspostseason.ftm == 5.600000)
        #expect(careertotalspostseason.fta == 6.700000)
        #expect(careertotalspostseason.ftPct == 0.841)
        #expect(careertotalspostseason.oreb == 1.000000)
        #expect(careertotalspostseason.dreb == 7.200000)
        #expect(careertotalspostseason.rebounds == 8.200000)
        #expect(careertotalspostseason.assists == 4.900000)
        #expect(careertotalspostseason.steals == 1.200000)
        #expect(careertotalspostseason.blocks == 0.900000)
        #expect(careertotalspostseason.turnovers == 2.900000)
        #expect(careertotalspostseason.personalFouls == 2.600000)
        #expect(careertotalspostseason.points == 24.300000)
    }
    
    @Test func canDecodeSeasonTotalsAllStarSeason() throws {
        let seasontotalsallstarseason: SeasonTotalsAllStarSeason = try SeasonTotalsAllStarSeason(from: response.resultSets[4].rowSet[0], headers: response.resultSets[4].headers)
        
        #expect(seasontotalsallstarseason.playerId == 1628369)
        #expect(seasontotalsallstarseason.seasonId == "2019-20")
        #expect(seasontotalsallstarseason.leagueId == "00")
        #expect(seasontotalsallstarseason.teamId == 1610616834)
        #expect(seasontotalsallstarseason.teamAbbreviation == "LBN")
        #expect(seasontotalsallstarseason.playerAge == 22)
        #expect(seasontotalsallstarseason.gamesPlayed == 1)
        #expect(seasontotalsallstarseason.gamesStarted == 0)
        #expect(seasontotalsallstarseason.minutes == 14.000000)
        #expect(seasontotalsallstarseason.fgm == 3.000000)
        #expect(seasontotalsallstarseason.fga == 8.000000)
        #expect(seasontotalsallstarseason.fgPct == 0.375)
        #expect(seasontotalsallstarseason.fg3m == 0.000000)
        #expect(seasontotalsallstarseason.fg3a == 4.000000)
        #expect(seasontotalsallstarseason.fg3Pct == 0.000)
        #expect(seasontotalsallstarseason.ftm == 0.000000)
        #expect(seasontotalsallstarseason.fta == 0.000000)
        #expect(seasontotalsallstarseason.ftPct == 0.000)
        #expect(seasontotalsallstarseason.oreb == 0.000000)
        #expect(seasontotalsallstarseason.dreb == 1.000000)
        #expect(seasontotalsallstarseason.rebounds == 1.000000)
        #expect(seasontotalsallstarseason.assists == 3.000000)
        #expect(seasontotalsallstarseason.steals == 3.000000)
        #expect(seasontotalsallstarseason.blocks == 0.000000)
        #expect(seasontotalsallstarseason.turnovers == 0.000000)
        #expect(seasontotalsallstarseason.personalFouls == 0.000000)
        #expect(seasontotalsallstarseason.points == 6.000000)
    }
    
    @Test func canDecodeCareerTotalsAllStarSeason() throws {
        let careertotalsallstarseason: CareerTotalsAllStarSeason = try CareerTotalsAllStarSeason(from: response.resultSets[5].rowSet[0], headers: response.resultSets[5].headers)
        
        #expect(careertotalsallstarseason.playerId == 1628369)
        #expect(careertotalsallstarseason.leagueId == "00")
        #expect(careertotalsallstarseason.teamId == 0)
        #expect(careertotalsallstarseason.gamesPlayed == 7)
        #expect(careertotalsallstarseason.gamesStarted == 6)
        #expect(careertotalsallstarseason.minutes == 18.300000)
        #expect(careertotalsallstarseason.fgm == 7.900000)
        #expect(careertotalsallstarseason.fga == 12.700000)
        #expect(careertotalsallstarseason.fgPct == 0.618)
        #expect(careertotalsallstarseason.fg3m == 2.900000)
        #expect(careertotalsallstarseason.fg3a == 7.000000)
        #expect(careertotalsallstarseason.fg3Pct == 0.408)
        #expect(careertotalsallstarseason.ftm == 0.100000)
        #expect(careertotalsallstarseason.fta == 0.300000)
        #expect(careertotalsallstarseason.ftPct == 0.500)
        #expect(careertotalsallstarseason.oreb == 0.700000)
        #expect(careertotalsallstarseason.dreb == 3.100000)
        #expect(careertotalsallstarseason.rebounds == 3.900000)
        #expect(careertotalsallstarseason.assists == 4.000000)
        #expect(careertotalsallstarseason.steals == 1.400000)
        #expect(careertotalsallstarseason.blocks == 0.400000)
        #expect(careertotalsallstarseason.turnovers == 0.900000)
        #expect(careertotalsallstarseason.personalFouls == 0.600000)
        #expect(careertotalsallstarseason.points == 18.700000)
    }
    
    @Test func canDecodeSeasonTotalsCollegeSeason() throws {
        let seasontotalscollegeseason: SeasonTotalsCollegeSeason = try SeasonTotalsCollegeSeason(from: response.resultSets[6].rowSet[0], headers: response.resultSets[6].headers)
        
        #expect(seasontotalscollegeseason.playerId == 1628369)
        #expect(seasontotalscollegeseason.seasonId == "2016-17")
        #expect(seasontotalscollegeseason.leagueId == "00")
        #expect(seasontotalscollegeseason.organizationId == 3111)
        #expect(seasontotalscollegeseason.schoolName == "Duke")
        #expect(seasontotalscollegeseason.playerAge == 19)
        #expect(seasontotalscollegeseason.gamesPlayed == 29)
        #expect(seasontotalscollegeseason.gamesStarted == 29)
        #expect(seasontotalscollegeseason.minutes == 33.300000)
        #expect(seasontotalscollegeseason.fgm == 5.700000)
        #expect(seasontotalscollegeseason.fga == 12.600000)
        #expect(seasontotalscollegeseason.fgPct == 0.452000)
        #expect(seasontotalscollegeseason.fg3m == 1.400000)
        #expect(seasontotalscollegeseason.fg3a == 4.000000)
        #expect(seasontotalscollegeseason.fg3Pct == 0.342000)
        #expect(seasontotalscollegeseason.ftm == 4.100000)
        #expect(seasontotalscollegeseason.fta == 4.800000)
        #expect(seasontotalscollegeseason.ftPct == 0.849000)
        #expect(seasontotalscollegeseason.oreb == 1.300000)
        #expect(seasontotalscollegeseason.dreb == 6.000000)
        #expect(seasontotalscollegeseason.rebounds == 7.300000)
        #expect(seasontotalscollegeseason.assists == 2.100000)
        #expect(seasontotalscollegeseason.steals == 1.300000)
        #expect(seasontotalscollegeseason.blocks == 1.100000)
        #expect(seasontotalscollegeseason.turnovers == 2.600000)
        #expect(seasontotalscollegeseason.personalFouls == 3.000000)
        #expect(seasontotalscollegeseason.points == 16.800000)
    }
    
    @Test func canDecodeCareerTotalsCollegeSeason() throws {
        let careertotalscollegeseason: CareerTotalsCollegeSeason = try CareerTotalsCollegeSeason(from: response.resultSets[7].rowSet[0], headers: response.resultSets[7].headers)
        
        #expect(careertotalscollegeseason.playerId == 1628369)
        #expect(careertotalscollegeseason.leagueId == "00")
        #expect(careertotalscollegeseason.organizationId == 0)
        #expect(careertotalscollegeseason.gamesPlayed == 29)
        #expect(careertotalscollegeseason.gamesStarted == 29)
        #expect(careertotalscollegeseason.minutes == 33.300000)
        #expect(careertotalscollegeseason.fgm == 5.700000)
        #expect(careertotalscollegeseason.fga == 12.600000)
        #expect(careertotalscollegeseason.fgPct == 0.452000)
        #expect(careertotalscollegeseason.fg3m == 1.400000)
        #expect(careertotalscollegeseason.fg3a == 4.000000)
        #expect(careertotalscollegeseason.fg3Pct == 0.342000)
        #expect(careertotalscollegeseason.ftm == 4.100000)
        #expect(careertotalscollegeseason.fta == 4.800000)
        #expect(careertotalscollegeseason.ftPct == 0.849000)
        #expect(careertotalscollegeseason.oreb == 1.300000)
        #expect(careertotalscollegeseason.dreb == 6.000000)
        #expect(careertotalscollegeseason.rebounds == 7.300000)
        #expect(careertotalscollegeseason.assists == 2.100000)
        #expect(careertotalscollegeseason.steals == 1.300000)
        #expect(careertotalscollegeseason.blocks == 1.100000)
        #expect(careertotalscollegeseason.turnovers == 2.600000)
        #expect(careertotalscollegeseason.personalFouls == 3.000000)
        #expect(careertotalscollegeseason.points == 16.800000)
    }
    
    @Test func canDecodeSeasonTotalsPreseason() throws {
        let seasontotalspreseason: SeasonTotalsPreseason = try SeasonTotalsPreseason(from: response.resultSets[8].rowSet[0], headers: response.resultSets[8].headers)
        
        #expect(seasontotalspreseason.playerId == 1628369)
        #expect(seasontotalspreseason.seasonId == "2017-18")
        #expect(seasontotalspreseason.leagueId == "00")
        #expect(seasontotalspreseason.teamId == 1610612738)
        #expect(seasontotalspreseason.teamAbbreviation == "BOS")
        #expect(seasontotalspreseason.playerAge == 20)
        #expect(seasontotalspreseason.gamesPlayed == 4)
        #expect(seasontotalspreseason.gamesStarted == 3)
        #expect(seasontotalspreseason.minutes == 25.000000)
        #expect(seasontotalspreseason.fgm == 3.300000)
        #expect(seasontotalspreseason.fga == 8.800000)
        #expect(seasontotalspreseason.fgPct == 0.371)
        #expect(seasontotalspreseason.fg3m == 1.000000)
        #expect(seasontotalspreseason.fg3a == 3.000000)
        #expect(seasontotalspreseason.fg3Pct == 0.333)
        #expect(seasontotalspreseason.ftm == 0.800000)
        #expect(seasontotalspreseason.fta == 1.300000)
        #expect(seasontotalspreseason.ftPct == 0.600)
        #expect(seasontotalspreseason.oreb == 0.300000)
        #expect(seasontotalspreseason.dreb == 4.000000)
        #expect(seasontotalspreseason.rebounds == 4.300000)
        #expect(seasontotalspreseason.assists == 2.000000)
        #expect(seasontotalspreseason.steals == 1.000000)
        #expect(seasontotalspreseason.blocks == 0.500000)
        #expect(seasontotalspreseason.turnovers == 1.300000)
        #expect(seasontotalspreseason.personalFouls == 1.800000)
        #expect(seasontotalspreseason.points == 8.300000)
    }
    
    @Test func canDecodeCareerTotalsPreseason() throws {
        let careertotalspreseason: CareerTotalsPreseason = try CareerTotalsPreseason(from: response.resultSets[9].rowSet[0], headers: response.resultSets[9].headers)
        
        #expect(careertotalspreseason.playerId == 1628369)
        #expect(careertotalspreseason.leagueId == "00")
        #expect(careertotalspreseason.teamId == 0)
        #expect(careertotalspreseason.gamesPlayed == 28)
        #expect(careertotalspreseason.gamesStarted == 27)
        #expect(careertotalspreseason.minutes == 24.400000)
        #expect(careertotalspreseason.fgm == 4.800000)
        #expect(careertotalspreseason.fga == 12.800000)
        #expect(careertotalspreseason.fgPct == 0.376)
        #expect(careertotalspreseason.fg3m == 1.700000)
        #expect(careertotalspreseason.fg3a == 5.600000)
        #expect(careertotalspreseason.fg3Pct == 0.301)
        #expect(careertotalspreseason.ftm == 2.800000)
        #expect(careertotalspreseason.fta == 3.600000)
        #expect(careertotalspreseason.ftPct == 0.780)
        #expect(careertotalspreseason.oreb == 0.600000)
        #expect(careertotalspreseason.dreb == 5.600000)
        #expect(careertotalspreseason.rebounds == 6.300000)
        #expect(careertotalspreseason.assists == 2.900000)
        #expect(careertotalspreseason.steals == 1.300000)
        #expect(careertotalspreseason.blocks == 0.300000)
        #expect(careertotalspreseason.turnovers == 2.100000)
        #expect(careertotalspreseason.personalFouls == 1.500000)
        #expect(careertotalspreseason.points == 14.100000)
    }
    
    @Test func canDecodeSeasonRankingsRegularSeason() throws {
        let seasonrankingsregularseason: SeasonRankingsRegularSeason = try SeasonRankingsRegularSeason(from: response.resultSets[10].rowSet[0], headers: response.resultSets[10].headers)
        
        #expect(seasonrankingsregularseason.playerId == 1628369)
        #expect(seasonrankingsregularseason.seasonId == "2017-18")
        #expect(seasonrankingsregularseason.leagueId == "00")
        #expect(seasonrankingsregularseason.teamId == 1610612738)
        #expect(seasonrankingsregularseason.teamAbbreviation == "BOS")
        #expect(seasonrankingsregularseason.playerAge == "NR")
        #expect(seasonrankingsregularseason.gamesPlayed == "NR")
        #expect(seasonrankingsregularseason.gamesStarted == "NR")
        #expect(seasonrankingsregularseason.rankPgMin == 63)
        #expect(seasonrankingsregularseason.rankPgFgm == 80)
        #expect(seasonrankingsregularseason.rankPgFga == 80)
        #expect(seasonrankingsregularseason.rankFgPct == 48)
        #expect(seasonrankingsregularseason.rankPgFg3m == 98)
        #expect(seasonrankingsregularseason.rankPgFg3a == 98)
        #expect(seasonrankingsregularseason.rankFg3Pct == 8)
        #expect(seasonrankingsregularseason.rankPgFtm == 42)
        #expect(seasonrankingsregularseason.rankPgFta == 42)
        #expect(seasonrankingsregularseason.rankFtPct == 40)
        #expect(seasonrankingsregularseason.rankPgOreb == 150)
        #expect(seasonrankingsregularseason.rankPgDreb == 66)
        #expect(seasonrankingsregularseason.rankPgReb == 83)
        #expect(seasonrankingsregularseason.rankPgAst == 141)
        #expect(seasonrankingsregularseason.rankPgStl == 62)
        #expect(seasonrankingsregularseason.rankPgBlk == 56)
        #expect(seasonrankingsregularseason.rankPgTov == 97)
        #expect(seasonrankingsregularseason.rankPgPts == 62)
        #expect(seasonrankingsregularseason.rankPgEff == 74)
    }
    
    @Test func canDecodeSeasonRankingsPostSeason() throws {
        let seasonrankingspostseason: SeasonRankingsPostSeason = try SeasonRankingsPostSeason(from: response.resultSets[11].rowSet[0], headers: response.resultSets[11].headers)
        
        #expect(seasonrankingspostseason.playerId == 1628369)
        #expect(seasonrankingspostseason.seasonId == "2017-18")
        #expect(seasonrankingspostseason.leagueId == "00")
        #expect(seasonrankingspostseason.teamId == 1610612738)
        #expect(seasonrankingspostseason.teamAbbreviation == "BOS")
        #expect(seasonrankingspostseason.playerAge == "NR")
        #expect(seasonrankingspostseason.gamesPlayed == "NR")
        #expect(seasonrankingspostseason.gamesStarted == "NR")
        #expect(seasonrankingspostseason.rankPgMin == 22)
        #expect(seasonrankingspostseason.rankPgFgm == 24)
        #expect(seasonrankingspostseason.rankPgFga == 27)
        #expect(seasonrankingspostseason.rankFgPct == 28)
        #expect(seasonrankingspostseason.rankPgFg3m == 49)
        #expect(seasonrankingspostseason.rankPgFg3a == 48)
        #expect(seasonrankingspostseason.rankFg3Pct == 52)
        #expect(seasonrankingspostseason.rankPgFtm == 11)
        #expect(seasonrankingspostseason.rankPgFta == 16)
        #expect(seasonrankingspostseason.rankFtPct == 17)
        #expect(seasonrankingspostseason.rankPgOreb == 91)
        #expect(seasonrankingspostseason.rankPgDreb == 55)
        #expect(seasonrankingspostseason.rankPgReb == 62)
        #expect(seasonrankingspostseason.rankPgAst == 42)
        #expect(seasonrankingspostseason.rankPgStl == 32)
        #expect(seasonrankingspostseason.rankPgBlk == 54)
        #expect(seasonrankingspostseason.rankPgTov == 30)
        #expect(seasonrankingspostseason.rankPgPts == 23)
        #expect(seasonrankingspostseason.rankPgEff == 37)
    }
    
    @Test func canDecodeSeasonHighs() throws {
        let seasonhighs: SeasonHigh = try SeasonHigh(from: response.resultSets[12].rowSet[0], headers: response.resultSets[12].headers)
        
        #expect(seasonhighs.playerId == 1628369)
        #expect(seasonhighs.gameId == "0042400214")
        #expect(seasonhighs.gameDate == "MAY 12 2025")
        #expect(seasonhighs.vsTeamId == 1610612752)
        #expect(seasonhighs.vsTeamCity == "New York")
        #expect(seasonhighs.vsTeamName == "Knicks")
        #expect(seasonhighs.vsTeamAbbreviation == "NYK")
        #expect(seasonhighs.stat == "PTS")
        #expect(seasonhighs.statValue == 42)
        #expect(seasonhighs.statOrder == 1)
        #expect(seasonhighs.dateEst == "2025-05-12T00:00:00")
    }
    
    @Test func canDecodeCareerHighs() throws {
        let careerhighs: CareerHigh = try CareerHigh(from: response.resultSets[13].rowSet[0], headers: response.resultSets[13].headers)
        
        #expect(careerhighs.playerId == 1628369)
        #expect(careerhighs.gameId == "0042200217")
        #expect(careerhighs.gameDate == "MAY 14 2023")
        #expect(careerhighs.vsTeamId == 1610612755)
        #expect(careerhighs.vsTeamCity == "Philadelphia")
        #expect(careerhighs.vsTeamName == "76ers")
        #expect(careerhighs.vsTeamAbbreviation == "PHI")
        #expect(careerhighs.stat == "PTS")
        #expect(careerhighs.statValue == 51)
        #expect(careerhighs.statOrder == 1)
        #expect(careerhighs.dateEst == "2023-05-14T00:00:00")
    }
}
